// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.2
// - protoc             v3.21.3
// source: UserCenterService.proto

package rpc_api

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// UserCenterServiceClient is the client API for UserCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCenterServiceClient interface {
	GetUserBasicByTmpToken(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	GetUserBasicByUserName(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	GetUserBasicByMobile(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	GetUserBasicByMail(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	GetUserBasicByDingtalkCode(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	GetUserBasicByQqCode(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	GetUserBasicByWeChatCode(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	GetUserBasicBySinaWeiboCode(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	BindingMobile(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	ChangeThirdPartyAccountWithLogin(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment)
	GetMinimalUserInfoByUserId(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*MinimalUserInfoRsp, common.ErrorWithAttachment)
	GetMobileInfoByUserId(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*MobileInfoRsp, common.ErrorWithAttachment)
}

type userCenterServiceClient struct {
	cc *triple.TripleConn
}

type UserCenterServiceClientImpl struct {
	GetUserBasicByTmpToken           func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByUserName           func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByMobile             func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByMail               func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByDingtalkCode       func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByQqCode             func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByWeChatCode         func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicBySinaWeiboCode      func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	BindingMobile                    func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	ChangeThirdPartyAccountWithLogin func(ctx context.Context, in *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetMinimalUserInfoByUserId       func(ctx context.Context, in *PasswordLoginReq) (*MinimalUserInfoRsp, error)
	GetMobileInfoByUserId            func(ctx context.Context, in *PasswordLoginReq) (*MobileInfoRsp, error)
}

func (c *UserCenterServiceClientImpl) GetDubboStub(cc *triple.TripleConn) UserCenterServiceClient {
	return NewUserCenterServiceClient(cc)
}

func NewUserCenterServiceClient(cc *triple.TripleConn) UserCenterServiceClient {
	return &userCenterServiceClient{cc}
}

func (c *userCenterServiceClient) GetUserBasicByTmpToken(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBasicByTmpToken", in, out)
}

func (c *userCenterServiceClient) GetUserBasicByUserName(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBasicByUserName", in, out)
}

func (c *userCenterServiceClient) GetUserBasicByMobile(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBasicByMobile", in, out)
}

func (c *userCenterServiceClient) GetUserBasicByMail(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBasicByMail", in, out)
}

func (c *userCenterServiceClient) GetUserBasicByDingtalkCode(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBasicByDingtalkCode", in, out)
}

func (c *userCenterServiceClient) GetUserBasicByQqCode(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBasicByQqCode", in, out)
}

func (c *userCenterServiceClient) GetUserBasicByWeChatCode(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBasicByWeChatCode", in, out)
}

func (c *userCenterServiceClient) GetUserBasicBySinaWeiboCode(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserBasicBySinaWeiboCode", in, out)
}

func (c *userCenterServiceClient) BindingMobile(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/BindingMobile", in, out)
}

func (c *userCenterServiceClient) ChangeThirdPartyAccountWithLogin(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*UserBasicInfoRsp, common.ErrorWithAttachment) {
	out := new(UserBasicInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeThirdPartyAccountWithLogin", in, out)
}

func (c *userCenterServiceClient) GetMinimalUserInfoByUserId(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*MinimalUserInfoRsp, common.ErrorWithAttachment) {
	out := new(MinimalUserInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetMinimalUserInfoByUserId", in, out)
}

func (c *userCenterServiceClient) GetMobileInfoByUserId(ctx context.Context, in *PasswordLoginReq, opts ...grpc_go.CallOption) (*MobileInfoRsp, common.ErrorWithAttachment) {
	out := new(MobileInfoRsp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetMobileInfoByUserId", in, out)
}

// UserCenterServiceServer is the server API for UserCenterService service.
// All implementations must embed UnimplementedUserCenterServiceServer
// for forward compatibility
type UserCenterServiceServer interface {
	GetUserBasicByTmpToken(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByUserName(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByMobile(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByMail(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByDingtalkCode(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByQqCode(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicByWeChatCode(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetUserBasicBySinaWeiboCode(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	BindingMobile(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	ChangeThirdPartyAccountWithLogin(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error)
	GetMinimalUserInfoByUserId(context.Context, *PasswordLoginReq) (*MinimalUserInfoRsp, error)
	GetMobileInfoByUserId(context.Context, *PasswordLoginReq) (*MobileInfoRsp, error)
	mustEmbedUnimplementedUserCenterServiceServer()
}

// UnimplementedUserCenterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserCenterServiceServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedUserCenterServiceServer) GetUserBasicByTmpToken(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicByTmpToken not implemented")
}
func (UnimplementedUserCenterServiceServer) GetUserBasicByUserName(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicByUserName not implemented")
}
func (UnimplementedUserCenterServiceServer) GetUserBasicByMobile(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicByMobile not implemented")
}
func (UnimplementedUserCenterServiceServer) GetUserBasicByMail(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicByMail not implemented")
}
func (UnimplementedUserCenterServiceServer) GetUserBasicByDingtalkCode(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicByDingtalkCode not implemented")
}
func (UnimplementedUserCenterServiceServer) GetUserBasicByQqCode(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicByQqCode not implemented")
}
func (UnimplementedUserCenterServiceServer) GetUserBasicByWeChatCode(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicByWeChatCode not implemented")
}
func (UnimplementedUserCenterServiceServer) GetUserBasicBySinaWeiboCode(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasicBySinaWeiboCode not implemented")
}
func (UnimplementedUserCenterServiceServer) BindingMobile(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindingMobile not implemented")
}
func (UnimplementedUserCenterServiceServer) ChangeThirdPartyAccountWithLogin(context.Context, *PasswordLoginReq) (*UserBasicInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeThirdPartyAccountWithLogin not implemented")
}
func (UnimplementedUserCenterServiceServer) GetMinimalUserInfoByUserId(context.Context, *PasswordLoginReq) (*MinimalUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinimalUserInfoByUserId not implemented")
}
func (UnimplementedUserCenterServiceServer) GetMobileInfoByUserId(context.Context, *PasswordLoginReq) (*MobileInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMobileInfoByUserId not implemented")
}
func (s *UnimplementedUserCenterServiceServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedUserCenterServiceServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedUserCenterServiceServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &UserCenterService_ServiceDesc
}
func (UnimplementedUserCenterServiceServer) mustEmbedUnimplementedUserCenterServiceServer() {}

// UnsafeUserCenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCenterServiceServer will
// result in compilation errors.
type UnsafeUserCenterServiceServer interface {
	mustEmbedUnimplementedUserCenterServiceServer()
}

func RegisterUserCenterServiceServer(s grpc_go.ServiceRegistrar, srv UserCenterServiceServer) {
	s.RegisterService(&UserCenterService_ServiceDesc, srv)
}

func _UserCenterService_GetUserBasicByTmpToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBasicByTmpToken", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetUserBasicByTmpToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserBasicByTmpToken(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetUserBasicByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBasicByUserName", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetUserBasicByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserBasicByUserName(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetUserBasicByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBasicByMobile", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetUserBasicByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserBasicByMobile(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetUserBasicByMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBasicByMail", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetUserBasicByMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserBasicByMail(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetUserBasicByDingtalkCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBasicByDingtalkCode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetUserBasicByDingtalkCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserBasicByDingtalkCode(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetUserBasicByQqCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBasicByQqCode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetUserBasicByQqCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserBasicByQqCode(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetUserBasicByWeChatCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBasicByWeChatCode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetUserBasicByWeChatCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserBasicByWeChatCode(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetUserBasicBySinaWeiboCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserBasicBySinaWeiboCode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetUserBasicBySinaWeiboCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserBasicBySinaWeiboCode(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_BindingMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("BindingMobile", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/BindingMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).BindingMobile(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_ChangeThirdPartyAccountWithLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeThirdPartyAccountWithLogin", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/ChangeThirdPartyAccountWithLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).ChangeThirdPartyAccountWithLogin(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetMinimalUserInfoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetMinimalUserInfoByUserId", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetMinimalUserInfoByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetMinimalUserInfoByUserId(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetMobileInfoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetMobileInfoByUserId", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCenterService/GetMobileInfoByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetMobileInfoByUserId(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCenterService_ServiceDesc is the grpc_go.ServiceDesc for UserCenterService service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCenterService_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "UserCenterService",
	HandlerType: (*UserCenterServiceServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetUserBasicByTmpToken",
			Handler:    _UserCenterService_GetUserBasicByTmpToken_Handler,
		},
		{
			MethodName: "GetUserBasicByUserName",
			Handler:    _UserCenterService_GetUserBasicByUserName_Handler,
		},
		{
			MethodName: "GetUserBasicByMobile",
			Handler:    _UserCenterService_GetUserBasicByMobile_Handler,
		},
		{
			MethodName: "GetUserBasicByMail",
			Handler:    _UserCenterService_GetUserBasicByMail_Handler,
		},
		{
			MethodName: "GetUserBasicByDingtalkCode",
			Handler:    _UserCenterService_GetUserBasicByDingtalkCode_Handler,
		},
		{
			MethodName: "GetUserBasicByQqCode",
			Handler:    _UserCenterService_GetUserBasicByQqCode_Handler,
		},
		{
			MethodName: "GetUserBasicByWeChatCode",
			Handler:    _UserCenterService_GetUserBasicByWeChatCode_Handler,
		},
		{
			MethodName: "GetUserBasicBySinaWeiboCode",
			Handler:    _UserCenterService_GetUserBasicBySinaWeiboCode_Handler,
		},
		{
			MethodName: "BindingMobile",
			Handler:    _UserCenterService_BindingMobile_Handler,
		},
		{
			MethodName: "ChangeThirdPartyAccountWithLogin",
			Handler:    _UserCenterService_ChangeThirdPartyAccountWithLogin_Handler,
		},
		{
			MethodName: "GetMinimalUserInfoByUserId",
			Handler:    _UserCenterService_GetMinimalUserInfoByUserId_Handler,
		},
		{
			MethodName: "GetMobileInfoByUserId",
			Handler:    _UserCenterService_GetMobileInfoByUserId_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "UserCenterService.proto",
}
